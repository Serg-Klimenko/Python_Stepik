# 5.12 Command handler
# Напишите программу, имитирующую обработчик команд от пользователя.
# Программа должна выводить оповещение о своём состоянии в следующем формате:
# Когда пользователь вводит команду, содержимое которой обозначим как <command>, программа должна
# вывести фразу
# Processing "<command>" command...
# Например, пользователь ввёл Come to me, в таком случае должна быть выведена строка
# Processing "Come to me" command...
# Считывание команд должно продолжаться до ввода команды End, при этом программа должна вывести сообщение
# Good bye! и завершиться
# Для считывания команд используйте функцию input без аргументов.
# Формат ввода:
# Последовательность команд, каждая на отдельной строке. Команда состоит из символов латинского
# алфавита, пробелов и символов табуляции. Гарантируется отсутствие пробельных символов в начале и
# конце строки. Последняя команда всегда End.
#
# Формат вывода:
# Сообщения об обработке команд, как указано в задании, по одному сообщению на строку.

# while True:
#     command = input()
#     if command == 'End':
#         print('Good bye!')
#         break
#     else:
#         print('Processing \"' + command + '\" command...')
# ---------------------------------------------------------------------------------------------------
# 4.3 Caesar cipher
# Шифр Цезаря заключается в замене каждого символа входной строки на символ, находящийся на несколько
# позиций левее или правее его в алфавите.
# Для всех символов сдвиг один и тот же. Сдвиг циклический, т.е. если к последнему символу алфавита
# применить единичный сдвиг, то он заменится на первый символ, и наоборот.
# Напишите программу, которая шифрует текст шифром Цезаря.
# Используемый алфавит − - − пробел и малые символы латинского алфавита: ' abcdefghijklmnopqrstuvwxyz'
# Формат ввода:
# На первой строке указывается используемый сдвиг шифрования: целое число. Положительное
# число соответствует сдвигу вправо. На второй строке указывается непустая фраза для шифрования.
# Ведущие и завершающие пробелы не учитывать.
# Формат вывода:
# Единственная строка, в которой записана фраза: Result: "..." , где вместо многоточия внутри
# кавычек записана зашифрованная последовательность.
# abc = ' abcdefghijklmnopqrstuvwxyz'
# shift = int(input())
# string = input().lstrip().rstrip()
# result = ''
# for char in string:
#     result += abc[(abc.index(char) + shift) % len(abc)]
# print('Result: "' + result + '"')
# -----------------------------------------------------------------------------------------------------

# 3.9 Duplicates in list
# Напишите программу, которая принимает на вход список целых чисел и выводит на экран значения,
# которые повторяются в нём более одного раза.
# Для решения задачи может пригодиться метод sort списка.
# Формат ввода:
# Одна строка с целыми числами, разделёнными пробелом.
# Формат вывода:
# Строка, содержащая числа, разделённые пробелом. Числа не должны повторяться, порядок вывода
# может быть произвольным.

lst = [int(i) for i in input().split()]
lst.sort()
cnt = 0
while cnt < len(lst):
    step = lst.count(lst[cnt])
    if step > 1:
        print(lst[cnt], end=' ')
    cnt += step
